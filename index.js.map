{"version":3,"file":"index.js","sources":["../src/05-functions.ts"],"sourcesContent":["/**\n * - Типізація функцій\n * - Типізація аргументів\n * - Тип значення, яке повертає функція\n * - Опціональні параметри\n */\n\n\nfunction sum(x: number, y: number): number {\n    const result = x + y;\n    return result;\n\n}\n\nsum(1, 2)\n\n// sum(1, \"2\"); буде помилка, бо передаємо другим аргументом рядок\n\n// ----------------------------------------------------------------------\n\n// function makeMessage(word: string): void {\n//     console.log(word);\n// }\n// makeMessage(\"hello\")\n\n// ----------------------------------------------------------------------\n\n// function makeMessage(age: string | number): void {\n//     console.log(`Your age is ${age}`);\n// }\n// makeMessage(20)\n\n// ----------------------------------------------------------------------\n\n\nfunction test(num: number): string {\n    let value = \"test\";\n    let result = value + num;\n    return result;\n}\n\nconst a = Number(\"a\");\ntest(a);\n\n// ----------------------------------------------------------------------\n\n\ninterface StudentType {\n    studentName: string,\n    course: string,\n    time: number,\n}\n\nconst students: StudentType[] = [\n  {\n    studentName: \"Olha\",\n    course: \"JS\",\n    time: 8,\n  },\n  {\n    studentName: \"Oleg\",\n    course: \"React\",\n    time: 8,\n  },\n  {\n    studentName: \"Tetiana\",\n    course: \"HTML/CSS\",\n    time: 3,\n  },\n];\n\n\nfunction showCourses(studentsArr: StudentType[]): string[] {\n    const coursesList = studentsArr.map((student) => \n        student.course\n    )\n    return coursesList\n\n}\n\nshowCourses(students);\n\n// ----------------------------------------------------------------------\n\n// напишемо функцію з опціональними параметрами\nfunction makeMessage(username: string, login?: string): string | undefined {\n    if (login !== undefined) {\n        return `${username} has login ${login}`;\n    } else {\n        return `${username}`;\n\n    }\n    \n}\nmakeMessage(\"Oleg\", \"test\")\nmakeMessage(\"Tatiana\");\n\n// ----------------------------------------------------------------------\n\n// типізація методів обʼєктів\n\ninterface ProductType {\n    title: string,\n    price: number,\n\n}\n\ninterface BasketType {\n    owner: string,\n    products: ProductType[],\n    showOwner: (x: number, y?: string) => string,\n    addProduct: (product: ProductType) => void\n\n}\n\n\nconst basket: BasketType = {\n    owner: \"Oleg\",\n    products: [],\n    // showOwner: () => {}\n    showOwner(x: number) {\n        return `The owner of basket is ${this.owner} and has ${x} products`;\n\n    },\n    addProduct(product: ProductType) {\n        this.products.push(product)\n        // return this.products\n\n    }\n}\n\nbasket.showOwner(5);\n\nconst avocado: ProductType = {\n  title: \"avocado\",\n  price: 100,\n};\nbasket.addProduct(avocado);"],"names":["students","showCourses","studentsArr","student","basket","x","product","avocado"],"mappings":"ssBAqDA,MAAMA,EAA0B,CAC9B,CACE,YAAa,OACb,OAAQ,KACR,KAAM,CACR,EACA,CACE,YAAa,OACb,OAAQ,QACR,KAAM,CACR,EACA,CACE,YAAa,UACb,OAAQ,WACR,KAAM,CACR,CACF,EAGA,SAASC,EAAYC,EAAsC,CAIhD,OAHaA,EAAY,IAAKC,GACjCA,EAAQ,MAAA,CAIhB,CAEAF,EAAYD,CAAQ,EAoCpB,MAAMI,EAAqB,CACvB,MAAO,OACP,SAAU,CAAC,EAEX,UAAUC,EAAW,CACjB,MAAO,0BAA0B,KAAK,KAAK,YAAYA,CAAC,WAE5D,EACA,WAAWC,EAAsB,CACxB,KAAA,SAAS,KAAKA,CAAO,CAG9B,CACJ,EAEAF,EAAO,UAAU,CAAC,EAElB,MAAMG,EAAuB,CAC3B,MAAO,UACP,MAAO,GACT,EACAH,EAAO,WAAWG,CAAO"}